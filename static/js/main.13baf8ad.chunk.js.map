{"version":3,"sources":["Icon/index.js","EditTractOwnership/index.js","App.js","serviceWorker.js","index.js"],"names":["library","add","faLevelUpAlt","faMinusCircle","faPlus","faSmile","Icon","iconProps","icon","rotation","getIconProps","EditTractOwnership","value","onChange","useReducer","state","action","type","updatedTracts","index","field","console","log","updatedNpri","ownerIndex","npris","npriIndex","npriField","npriFieldValue","addNewMineralInterest","length","owner","interest","lease","addNewNpri","id","filter","el","Error","tracts","dispatch","handleOwnerChange","e","target","name","handleNpriChange","customerIndex","npriFieldFalue","renderNpris","map","npri","data-testid","key","Form","Group","controlId","InputGroup","className","FormControl","Append","Text","Button","variant","onClick","npriOwner","removeNpri","Table","hover","tractOwnerships","removeMineralInterest","renderRows","uuidv4","App","Container","Row","Col","Jumbotron","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13baf8ad.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport {\n  faLevelUpAlt,\n  faMinusCircle,\n  faPlus,\n  faSmile,\n} from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faLevelUpAlt, faMinusCircle, faPlus, faSmile);\n\nconst getIconProps = icon => {\n  switch (icon) {\n    case 'add':\n      return {\n        icon: 'plus',\n      };\n    case 'indent':\n      return {\n        icon: 'level-up-alt',\n        rotation: 90,\n      };\n    case 'remove':\n      return {\n        icon: 'minus-circle',\n      };\n    case 'smile':\n      return {\n        icon: 'smile',\n      };\n    default:\n      return {};\n  }\n};\n\nconst Icon = ({ icon }) => {\n  const iconProps = getIconProps(icon);\n\n  return <FontAwesomeIcon {...iconProps} />;\n};\n\nexport default Icon;\n","import React from 'react';\nimport { useReducer } from 'react';\nimport { Table, InputGroup, FormControl, Button, Form } from 'react-bootstrap';\nimport Icon from '../Icon/index.js';\n\nconst EditTractOwnership = ({ value = [], onChange = () => {} }) => {\n  const [tracts, dispatch] = useReducer(reducer, value);\n\n  function reducer(state, action) {\n    switch (action.type) {\n      case 'owner':\n        let updatedTracts = [...state];\n        updatedTracts[action.index] = {\n          ...updatedTracts[action.index],\n          [action.field]: action.value,\n        };\n        return updatedTracts;\n      case 'npri':\n        console.log(action);\n        let updatedNpri = [...state];\n        updatedNpri[action.ownerIndex].npris[action.npriIndex] = {\n          ...updatedNpri[action.ownerIndex].npris[action.npriIndex],\n          [action.npriField]: action.npriFieldValue,\n        };\n        return updatedNpri;\n      case 'addMin':\n        let addNewMineralInterest = [...state];\n        addNewMineralInterest[state.length] = {\n          index: state.length,\n          owner: 'add an owner',\n          interest: 'add interest',\n          lease: 'add lease',\n          npris: [],\n        };\n        return addNewMineralInterest;\n      case 'addNpri':\n        let addNewNpri = [...state];\n        addNewNpri[state.length - 1].npris[\n          addNewNpri[state.length - 1].npris.length\n        ] = {\n          id: '',\n          interest: 'add interest',\n          owner: 'add an owner',\n        };\n        console.log(addNewNpri[state.length - 1].npris);\n        return addNewNpri;\n      case 'removeMineralInterst':\n        let removedMineralInterest = [...state];\n        return removedMineralInterest.filter(\n          (el, id) => el.owner !== action.owner\n        );\n      case 'removeNpri':\n        let removedNpri = [...state];\n        // console.log(removedNpri[action.customerIndex].npris);\n        // return removedNpri[action.customerIndex].npris.filter(\n        //   (el, id) => id !== action.index\n        // );\n        return removedNpri;\n      default:\n        throw new Error();\n    }\n  }\n  const addMineralInterest = (e) => {\n    dispatch({\n      type: 'addMin',\n    });\n  };\n  const addNpri = (e) => {\n    dispatch({\n      type: 'addNpri',\n    });\n  };\n  const removeMineralInterest = (index, e, owner) => {\n    dispatch({\n      type: 'removeMineralInterst',\n      index: index,\n      owner: owner,\n    });\n  };\n\n  const removeNpri = (customerIndex, npriOwner, npriIndex, e) => {\n    dispatch({\n      type: 'removeNpri',\n      index: npriIndex,\n      npriOwner: npriOwner,\n      customerIndex: customerIndex,\n    });\n  };\n\n  const handleOwnerChange = (e) => {\n    dispatch({\n      type: 'owner',\n      field: e.target.name,\n      index: e.target.id,\n      value: e.target.value,\n    });\n  };\n  const handleNpriChange = (customerIndex, e) => {\n    dispatch({\n      type: 'npri',\n      ownerIndex: customerIndex,\n      npriIndex: e.target.id,\n      npriField: e.target.name,\n      npriFieldFalue: e.target.value,\n    });\n  };\n  const renderRows = (tracts) => {\n    return tracts.map((tractOwnerships, index) => {\n      return (\n        <>\n          <tr data-testid={`mineralInterest-${tractOwnerships.id}`} key={index}>\n            <td id={`mineralInterest-${tractOwnerships.id}`}>\n              <Form.Group controlId={index}>\n                <InputGroup id={index} className=\"owner\">\n                  <FormControl\n                    name=\"owner\"\n                    value={tractOwnerships.owner}\n                    onChange={handleOwnerChange}\n                    type=\"text\"\n                  />\n                </InputGroup>\n              </Form.Group>\n            </td>\n            <td id={`mineralInterest-${tractOwnerships.id}`}>\n              <Form.Group controlId={index}>\n                <InputGroup>\n                  <FormControl\n                    name=\"interest\"\n                    value={tractOwnerships.interest}\n                    onChange={handleOwnerChange}\n                  />\n                  <InputGroup.Append>\n                    <InputGroup.Text>%</InputGroup.Text>\n                  </InputGroup.Append>\n                </InputGroup>\n              </Form.Group>\n            </td>\n            <td></td>\n            <td id={`mineralinterest-${tractOwnerships.id}`}>\n              <Form.Group controlId={index}>\n                <InputGroup className=\"lease\">\n                  <FormControl\n                    name=\"lease\"\n                    value={tractOwnerships.lease}\n                    onChange={handleOwnerChange}\n                  />\n                </InputGroup>\n              </Form.Group>\n            </td>\n            <td>\n              <div>\n                <Button\n                  variant=\"light\"\n                  onClick={(e) =>\n                    removeMineralInterest(index, e, tractOwnerships.owner)\n                  }\n                >\n                  <Icon icon={'remove'} />\n                </Button>\n              </div>\n            </td>\n          </tr>\n          {renderNpris(tractOwnerships.npris, index)}\n        </>\n      );\n    });\n  };\n  const renderNpris = (npris, customerIndex) => {\n    return npris.map((npri, npriIndex) => {\n      return (\n        <tr data-testid={`mineralInterest-${npri.id}`} key={npri.id}>\n          <td id={`mineralInterest-${npri.id}`}>\n            <Form.Group controlId={npriIndex}>\n              <InputGroup id={npriIndex} className=\"owner\">\n                <Icon icon={'indent'} />\n                <FormControl\n                  name=\"owner\"\n                  value={tracts[customerIndex].npris[npriIndex].owner}\n                  onChange={(e) => handleNpriChange(customerIndex, e)}\n                  type=\"text\"\n                />\n              </InputGroup>\n            </Form.Group>\n          </td>\n          <td></td>\n          <td id={`mineralInterest-${npri.id}`}>\n            <Form.Group controlId={npriIndex}>\n              <InputGroup>\n                <FormControl\n                  name=\"interest\"\n                  value={tracts[customerIndex].npris[npriIndex].interest}\n                  onChange={(e) => handleNpriChange(customerIndex, e)}\n                  type=\"text\"\n                />\n                <InputGroup.Append>\n                  <InputGroup.Text>%</InputGroup.Text>\n                </InputGroup.Append>\n              </InputGroup>\n            </Form.Group>\n          </td>\n          <td></td>\n          <td>\n            <div>\n              <Button\n                variant=\"light\"\n                onClick={(e) =>\n                  removeNpri(customerIndex, npri.owner, npriIndex, e)\n                }\n              >\n                <Icon icon={'remove'} />\n              </Button>\n            </div>\n          </td>\n        </tr>\n      );\n    });\n  };\n  return (\n    <div>\n      <div>\n        <Table hover>\n          <thead>\n            <tr>\n              <th>Owner</th>\n              <th>Mineral Interest</th>\n              <th>NPRI</th>\n              <th>Lease</th>\n            </tr>\n          </thead>\n          <tbody>{renderRows(tracts)}</tbody>\n        </Table>\n      </div>\n      <div>\n        <Button variant=\"light\" onClick={addNpri}>\n          <Icon icon={'add'} />\n          {'  '}\n          Add NPRI\n        </Button>\n      </div>\n      <div>\n        <Button variant=\"light\" onClick={addMineralInterest}>\n          <Icon icon={'add'} />\n          {'  '}\n          Add Mineral Interest\n        </Button>\n      </div>\n    </div>\n  );\n};\nexport default EditTractOwnership;\n","import React from 'react';\nimport { Col, Container, Jumbotron, Row } from 'react-bootstrap';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nimport EditTractOwnership from './EditTractOwnership';\nimport Icon from './Icon';\n\nconst tractOwnerships = [\n  {\n    id: uuidv4(),\n    owner: 'Luke Skywalker',\n    interest: 0.5,\n    lease: 'Tatooine Lease',\n    npris: [\n      {\n        id: uuidv4(),\n        owner: 'Leia Organa',\n        interest: 0.45,\n      },\n      {\n        id: uuidv4(),\n        owner: 'Han Solo',\n        interest: 0.15,\n      },\n    ],\n  },\n];\n\nfunction App() {\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <Jumbotron>\n            <h1>\n              Landdox Code Challenge <Icon icon=\"smile\" />\n            </h1>\n          </Jumbotron>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <EditTractOwnership value={tractOwnerships} />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}